<!Doctype html>
<html>
    <head>
        <title>Your missing lesson</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" type="text/css" href="css/style.css">
        <link rel="stylesheet" type="text/css" href="css/roadmap.css">
        <link rel="stylesheet" type="text/css" href="css/lowlevel.css">
        <link rel="stylesheet" type="text/css" href="css/mediaQuery.css">
        <link rel="stylesheet" type="text/css" href="css/all.min.css">
        <link rel="stylesheet" type="text/css" href="css/normalize.css">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&display=swap" rel="stylesheet">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&family=Source+Sans+3:ital,wght@0,200..900;1,200..900&display=swap" rel="stylesheet">
    </head>

    <body>

        <div clas="hero">

            <div class="header">
                <div class="header-content">
                    <div class="header-container">
                        <div class="content">
                            <ul class="nav-list">
                                <li>
                                    <a href="index.htm">./sigfault.log </a>
                                </li>
                                <li>
                                    <a href="lecture.htm">lectures</a>
                                </li>
                                <li>
                                    <a href="about.htm">about</a>
                                </li>
                            </ul>
                            <ul class="bottom-nav-list">
                                <li>
                                    <a href="index.htm" id="toggle-button">./sigfault.log <span class="dropp-list">(+)</span></a>
                                </li>
                                <li class="hidden-links">
                                    <a href="lecture.htm">- lectures</a>
                                </li>
                                <li class="hidden-links">
                                    <a href="about.htm">- about</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="hero-content">
                <div class="container">
                    <div class="content">
                        <div class="title">
                            <h1>Low-Level Systems Study Plan</h1>
                        </div>
                        <div class="road-descr">
                            <p>This roadmap is designed for those who seek a true low-level understanding of how computers work—not just as users or programmers, but as engineers who understand what happens at every layer of the system.</p>
                            <p>The journey begins with the foundations of digital logic and circuit design, then moves through computer organization and architecture. From there, you’ll explore low-level interaction with the machine via Assembly and C programming, ultimately leading to building and understanding operating systems.</p>
                            <p>Each stage is supported by hands-on projects that reinforce theoretical concepts with real implementation experience.</p>
                        </div>

                        <div class="low-content">
                            <div class="low-title">
                            </div>
                            <div class="low-info">
                                <h2 class="info-title">1. digital logic & binary systems</h2>
                                <p class="info-desc">
                                    we start with the fundamentals — logic gates, binary arithmetic, truth tables, and circuit design. understanding how transistors lead to computation is critical.
                                </p>
                                <p class="info-sources">
                                    recommended book: <a href="https://www.amazon.com/digital-design-morris-mano/dp/0134549899" target="_blank">digital design by morris mano</a><br/>
                                    online course: <a href="https://www.nand2tetris.org/" target="_blank">nand2tetris – part i</a>
                                </p>
                            </div>

                            <div class="low-info">
                                <h2 class="info-title">2. Computer Organization</h2>
                                <p class="info-desc">
                                    This part explains how the processor, memory, I/O, and buses work together. You’ll learn how data moves, how the CPU fetches and executes instructions, and what the control unit does.
                                </p>
                                <p class="info-sources">
                                    Book: <a href="https://www.amazon.com/Computer-Organization-Design-MIPS-Architecture/dp/0128201096" target="_blank">Computer Organization and Design by Patterson & Hennessy</a><br/>
                                    Course: <a href="https://cs61c.org/" target="_blank">CS61C – Great Ideas in Computer Architecture (UC Berkeley)</a>
                                </p>
                            </div>

                            <div class="low-info">
                                <h2 class="info-title">3. Computer Architecture</h2>
                                <p class="info-desc">
                                    Dive deeper into the architecture level: instruction sets, pipelining, memory hierarchies (caches, RAM), and branch prediction. This is where performance becomes a major topic.
                                </p>
                                <p class="info-sources">
                                    Advanced Book: <a href="https://www.amazon.com/Computer-Architecture-Quantitative-Approach-Kaufmann/dp/0128119055" target="_blank">Computer Architecture: A Quantitative Approach</a><br/>
                                    Simulators to Practice: <a href="https://cpulator.01xz.net/" target="_blank">CPulator</a>, <a href="https://venus.cs61c.org/" target="_blank">Venus (RISC-V)</a>
                                </p>
                            </div>

                            <div class="low-info">
                                <h2 class="info-title">4. Low-Level Programming (Assembly + C)</h2>
                                <p class="info-desc">
                                    Now it's time to interact directly with the machine. Start with Assembly to understand instruction-level behavior, then move to C for system-level programming.
                                </p>
                                <p class="info-sources">
                                    Course: <a href="https://csapp.cs.cmu.edu/" target="_blank">Computer Systems: A Programmer's Perspective</a><br/>
                                    Book: <a href="https://nostarch.com/assembly" target="_blank">Programming from the Ground Up</a><br/>
                                    Practice: Use <a href="https://godbolt.org/" target="_blank">Compiler Explorer</a> to compare C and Assembly side-by-side.
                                </p>
                            </div>


                            <div class="low-info">
                                <h2 class="info-title">5. Operating Systems</h2>
                                <p class="info-desc">
                                          Understand the role of the OS in process management, memory, file systems, and scheduling. You’ll also write your own mini OS or kernel modules if you're brave!
                                </p>
                                <p class="info-sources">
                                    Book: <a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank">Operating Systems: Three Easy Pieces</a><br/>
                                    Course: <a href="https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M" target="_blank">MIT Operating Systems (6.828)</a><br/>
                                    Practice: Try building <a href="https://os.phil-opp.com/" target="_blank">Your own OS in Rust</a> or <a href="https://littleosbook.github.io/" target="_blank">Little OS Book (C/ASM)</a>
                                </p>
                            </div>
                        </div>

                    </div>
                    <hr style="margin-top: 50px;">
                </div>
            </div>

            <div class="footer">
                <div class="footer-content">
                    <div class="footer-container">
                        <div class="content">
                            <a href="https://github.com/saeeedhany/sigfault.log">Source code.</a>
                            <p>Licensed under saeed</p>
                            <p>See <a href="guidelines.htm">here</a> for contribution guidelines.</p>
                        </div>
                    </div>
                </div>
            </div>

    </body>
</html>






